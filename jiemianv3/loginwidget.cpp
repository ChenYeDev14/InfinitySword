#include "loginwidget.h"
#include "ui_loginwidget.h"
#include "database.h"

#include <QPainter>
#include <QPalette>
#include <QMessageBox>

#include <QUrl>
#include <QCryptographicHash>
#include <QtNetwork/QNetworkRequest>
#include <QtNetwork/QNetworkAccessManager>
#include <QtNetwork/QNetworkReply>

#include <QTextStream>

LogInWidget::LogInWidget(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::LogInWidget)
{
    ui->setupUi(this);
    QFile ini_file("./user.ini");
    if (ini_file.open(QIODevice::ReadOnly))
    {
        int len;
        ini_file.read((char*)&len, sizeof(int));
        QByteArray data = ini_file.read(len);
        user_name = "";
        user_name.append(QByteArray::fromBase64(data));
        ui->lineEdit_user->setText(user_name);
        ini_file.read((char*)&len, sizeof(int));
        data = ini_file.read(len);
        user_code = "";
        user_code.append(QByteArray::fromBase64(data));
        ui->lineEdit_code->setText(user_code);
        ini_file.close();
        ui->checkBox_remember->setChecked(true);
    }
    QPalette pe;
    pe.setColor(QPalette::WindowText,Qt::white);
    ui->label->setPalette(pe);
    ui->label_2->setPalette(pe);
    connect(ui->pushButton_login,SIGNAL(clicked()),this,SLOT(LogIn()));
    connect(ui->lineEdit_code, SIGNAL(returnPressed()), this, SLOT(LogIn()));
    connect(ui->lineEdit_user, SIGNAL(returnPressed()), this, SLOT(user_name_return_pressed()));
}

LogInWidget::~LogInWidget()
{
    if (ui->checkBox_remember->checkState() == Qt::Unchecked)
    {
        QFile::remove("./user.ini");
    }
    delete ui;
}

void LogInWidget::user_name_return_pressed()
{
    ui->lineEdit_code->setFocus();
    ui->lineEdit_code->selectAll();
}

void LogInWidget::paintEvent(QPaintEvent *)
{
    QPainter painter(this);
    painter.drawPixmap(0,0,1024,768,QPixmap(":/image/logIn.png"));
}

Ui::LogInWidget* LogInWidget::returnUi()
{
    return ui;
}


void LogInWidget::LogIn()
{
    db = QSqlDatabase::addDatabase("QMYSQL");
    db.setHostName(HOST_NAME);
    db.setDatabaseName(DATABASE_NAME);
    db.setUserName(USER_NAME);
    db.setPassword(PASSWORD);
    QString id;
    user_name = ui->lineEdit_user->text();
    if (db.open())
    {
        QUrl email;
        email.setPath(user_name);
        char *c = email.encodedPath().data();
        std::string s_email(c);

        ui->pushButton_login->setEnabled(false);

        //转换sha1
        user_code = ui->lineEdit_code->text();
        QByteArray data=user_code.toAscii();
        QCryptographicHash *hash=new QCryptographicHash(QCryptographicHash::Sha1);
        hash->addData(data);
        QByteArray sha1=hash->result();
        c = sha1.toHex().data();
        std::string string_sha1(c);
        //创建一个请求
        QNetworkRequest request;
        QString url = "http://duishi.eekexie.org/index.php/management/login_query?email="
                +QString::fromStdString(s_email)+"&pwd=";
        url += QString::fromStdString(string_sha1);
        request.setUrl(QUrl(url));
        //创建一个管理器
        QNetworkAccessManager *manager = new QNetworkAccessManager(this);
        //发送GET请求
        reply = manager->get(request);
        connect(reply, SIGNAL(readyRead()), this, SLOT(http_request_ready_read()));
        db.close();


    }
    else
    {
        QMessageBox box;
        box.setWindowTitle(tr("错误！"));
        box.setIcon(QMessageBox::Warning);
        box.setText(tr("连接服务器失败！请检查网络连接"));
        box.setStandardButtons(QMessageBox::Ok);
        box.exec();
        return;
    }
}

void LogInWidget::http_request_ready_read()
{
    //emit login_success(user_name);
    //ui->pushButton_login->setEnabled(true);
    //return;

    char result;
    reply->read(&result, sizeof(char));
    if ((result == '1'))
    {
        emit login_success(user_name);
        if (ui->checkBox_remember->checkState() == Qt::Checked)
        {
            QFile ini_file("./user.ini");
            if (ini_file.open(QIODevice::WriteOnly))
            {
                QByteArray data = user_name.toLocal8Bit().toBase64();
                int len = data.length();
                ini_file.write((char*)&len, sizeof(int));
                ini_file.write(data);
                data = user_code.toLocal8Bit().toBase64();
                len = data.length();
                ini_file.write((char*)&len, sizeof(int));
                ini_file.write(data);
                QTextStream out(&ini_file);
                out <<"\r\n"<<tr("请勿擅自修改此配置文件，否则可能导致平台无法正常启动！（如不小心改动导致了此情况可删除此文件）");
                out <<"\r\n"<<"Do not edit this file!";
                ini_file.close();
            }
        }
        else
        {
            QFile::remove("./user.ini");
        }
    }
    else
    {
        QMessageBox box;
        box.setWindowTitle(tr("错误！"));
        box.setIcon(QMessageBox::Warning);
        box.setText(tr("密码或邮箱输入错误！"));
        box.setStandardButtons(QMessageBox::Ok);
        box.exec();
    }
    ui->pushButton_login->setEnabled(true);
}
