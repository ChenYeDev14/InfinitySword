#include "testwidget.h"
#include "ui_testwidget.h"
#include "database.h"

#include <QPainter>

#include <QCryptographicHash>
#include <QtNetwork/QNetworkRequest>
#include <QtNetwork/QNetworkAccessManager>
#include <QtNetwork/QNetworkReply>

#include <QFileDialog>

#include <QMessageBox>
#include <QDebug>

#include <QFile>
#include <QTextStream>

const int max_round_num[10] = {75, 15, 45, 180, 300, 400, 1000, 0, 0, 0};

TestWidget::TestWidget(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::TestWidget)
{
    ui->setupUi(this);
    ui->progressBar->setValue(0);
    ui->comboBox_AI->setMaxCount(10);

    QFile ini_file;
    QTextStream in;
    ini_file.setFileName("./path_record_testBattle.ini");
    if (ini_file.open(QIODevice::ReadOnly))
    {
        QString path;
        int n;
        in.setDevice(&ini_file);
        in >> n;
        in.readLine();
        for (int i=0; i<n; i++)
        {
            path = in.readLine();
            ui->comboBox_AI->addItem(path);
        }
    }
    ini_file.close();
    level = 0;
    testbattle = new TestBattle();
    connect(testbattle, SIGNAL(connect_error()), this, SLOT(connectError()));
    connect(testbattle, SIGNAL(game_end(int)), this, SLOT(result(int)));
    connect(testbattle, SIGNAL(init_error()), this, SLOT(initError()));
    connect(testbattle, SIGNAL(version_error()), this, SLOT(versionError()));
    connect(testbattle, SIGNAL(check_fail()), this, SLOT(checkFail()));
    connect(testbattle, SIGNAL(round_up(int)), this, SLOT(round(int)));
    connect(testbattle, SIGNAL(path_error()), this, SLOT(pathError()));

    but[0] = ui->pushButton_3;
    but[1] = ui->pushButton_4;
    but[2] = ui->pushButton_5;
    but[3] = ui->pushButton_6;
    but[4] = ui->pushButton_7;
    but[5] = ui->pushButton_8;
    but[6] = ui->pushButton_9;
    but[7] = ui->pushButton_10;
    but[8] = ui->pushButton_11;
    but[9] = ui->pushButton_12;
    for (int i=0; i<10; i++)
    {
        if (i < 3) but[i]->setEnabled(false); else but[i]->setEnabled(true);
    }
    for ( int i = 0 ; i < 9 ; i++ ){
        but[i]->move(but[9]->x(),but[9]->y());

    }
    test[0] = ui->test1;
    test[1] = ui->test2;
    test[2] = ui->test3;
    test[3] = ui->test4;
    test[4] = ui->test5;
    test[5] = ui->test6;
    test[6] = ui->test7;
    test[7] = ui->test8;
    test[8] = ui->test9;
    test[9] = ui->test10;

}

TestWidget::~TestWidget()
{
    QFile ini_file;
    ini_file.setFileName("./path_record_testBattle.ini");
    QTextStream out;
    if (ini_file.open(QIODevice::WriteOnly))
    {
        QString path;
        out.setDevice(&ini_file);
        out << ui->comboBox_AI->count() << "\r\n";
        for (int i=0; i<ui->comboBox_AI->count(); i++)
            out << ui->comboBox_AI->itemText(i) << "\r\n";
        out <<"\r\n"<<tr("请勿擅自修改此配置文件，否则可能导致平台无法正常启动！（如不小心改动导致了此情况可删除此文件）");
        out <<"\r\n"<<"Do not edit this file!";
    }
    ini_file.close();
    delete testbattle;
    delete ui;
}

void TestWidget::SetUserName(QString user)
{
   user_name = user;
   testbattle->setUser(user);
}

void TestWidget::paintEvent(QPaintEvent *)
{
    QPainter painter(this);
    painter.drawPixmap(0,0,1024,768,QPixmap(":/image/logIn.png"));
}

Ui::TestWidget* TestWidget::returnUi()
{
    return ui;
}

void TestWidget::upDateScores()
{
    db = QSqlDatabase::addDatabase("QMYSQL");
    db.setHostName(HOST_NAME);
    db.setDatabaseName(DATABASE_NAME);
    db.setUserName(USER_NAME);
    db.setPassword(PASSWORD);
    if (!db.open()) return;
    QString columns = "test_1";
    for (int i=2; i<=10; i++) columns.append(",test_"+QString::number(i));
    columns.append(",nickname");
    QSqlQuery query(db);
    QString exe = "SELECT "+columns+" FROM user WHERE email = '"+user_name+"'";

    query.exec(exe);
    if (query.next()) for (int i=0; i<10; i++)
    {
        scores[i] = query.value(i).toInt();
    }
    ui->label_nickname->setText(query.value(10).toString());
    db.close();
    printScore();
}


void TestWidget::printScore()
{
    QString scoreNum;
    for ( int i = 0 ; i < 10 ; i++ ){
        scoreNum.setNum(scores[i]);
        test[i]->setText(scoreNum);
    }
}

void TestWidget::setAllEnable(bool f)
{
    for (int i=9; i>=3; i--) but[i]->setEnabled(f);
    if (f) level = 0;
}

void TestWidget::connectError()
{
    QMessageBox box;
    box.setWindowTitle(tr("连接错误！"));
    box.setIcon(QMessageBox::Warning);
    box.setText(tr("AI连接出错"));
    box.setStandardButtons(QMessageBox::Ok);
    box.exec();
    setAllEnable(true);
}


void TestWidget::initError()
{
    QMessageBox box;
    box.setWindowTitle(tr("初始化错误！"));
    box.setIcon(QMessageBox::Warning);
    box.setText(tr("AI初始化出错"));
    box.setStandardButtons(QMessageBox::Ok);
    box.exec();
    setAllEnable(true);
}

void TestWidget::pathError()
{
    QMessageBox box;
    box.setWindowTitle(tr("路径错误！"));
    box.setIcon(QMessageBox::Warning);
    box.setText(tr("AI路径错误"));
    box.setStandardButtons(QMessageBox::Ok);
    box.exec();
    setAllEnable(true);
}


void TestWidget::updateTestScore(int new_score)
{
    db = QSqlDatabase::addDatabase("QMYSQL");
    db.setHostName(HOST_NAME);
    db.setDatabaseName(DATABASE_NAME);
    db.setUserName(USER_NAME);
    db.setPassword(PASSWORD);
    if (!db.open())
    {
        QMessageBox box;
        box.setWindowTitle(tr("错误！"));
        box.setIcon(QMessageBox::Warning);
        box.setText(tr("连接服务器失败！分数未上传，请检查网络连接。"));
        box.setStandardButtons(QMessageBox::Ok);
        box.exec();
        return;
    }
    QSqlQuery query(db);
    QString column = "test_" + QString::number(level);
    QString exe = "SELECT "+column+" FROM user WHERE email = '"+user_name+"'";
    query.exec(exe);
    int origin_score;
    if (query.next())
    {
        origin_score = query.value(0).toInt();
        if (origin_score >= new_score) return;
        exe = "UPDATE user SET "+column+" = "+"'"+QString::number(new_score)+"'"+" WHERE email = '"+user_name+"'";
        query.exec(exe);
        scores[level-1] = new_score;
        printScore();
    }
    db.close();
}

void TestWidget::result(int score)
{
    QMessageBox box;
    box.setWindowTitle(tr("得分"));
    box.setIcon(QMessageBox::Information);
    box.setText(QString::number(score));
    box.setStandardButtons(QMessageBox::Ok);
    box.exec();
    updateTestScore(score);
    setAllEnable(true);
}

void TestWidget::round(int i)
{
    ui->progressBar->setValue(i);
}


void TestWidget::versionError()
{
    QMessageBox box;
    box.setWindowTitle(tr("版本错误！"));
    box.setIcon(QMessageBox::Warning);
    box.setText(tr("AI版本出错"));
    box.setStandardButtons(QMessageBox::Ok);
    box.exec();
    setAllEnable(true);
}

void TestWidget::checkFail()
{
    QMessageBox box;
    box.setWindowTitle(tr("AI用户错误！"));
    box.setIcon(QMessageBox::Warning);
    box.setText(tr("AI用户不匹配，请不要使用他人的AI"));
    box.setStandardButtons(QMessageBox::Ok);
    box.exec();
    setAllEnable(true);
}

void TestWidget::on_pushButton_2_clicked()
{
    QString fileName = QFileDialog::getOpenFileName(
                this,
                tr("载入AI"),
                "AIFiles/",
                tr("应用程序 (*.exe)"));
    if (fileName == "") return;
    for (int i=0; i< ui->comboBox_AI->count(); i++)
        if (fileName == ui->comboBox_AI->itemText(i))
        {
            ui->comboBox_AI->setCurrentIndex(i);
            return;
        }
    if (ui->comboBox_AI->count() == ui->comboBox_AI->maxCount())
    {
        int index = (ui->comboBox_AI->currentIndex() + 1) % ui->comboBox_AI->maxCount();
        ui->comboBox_AI->setItemText(index, fileName);
        ui->comboBox_AI->setCurrentIndex(index);
    }
    else
    {
        ui->comboBox_AI->addItem(fileName);
        ui->comboBox_AI->setCurrentIndex(ui->comboBox_AI->count()-1);
    }
}

void TestWidget::on_pushButton_12_clicked()  //第一关
{
    level = 1;
    setAllEnable(false);
    ui->progressBar->setRange(0, max_round_num[0]);
    ui->progressBar->setValue(0);
    testbattle->StartBattle(ui->comboBox_AI->currentText(), 1);
}

void TestWidget::on_pushButton_11_clicked() //第二关
{
    level = 2;
    setAllEnable(false);
    ui->progressBar->setRange(0, max_round_num[1]);
    ui->progressBar->setValue(0);
    testbattle->StartBattle(ui->comboBox_AI->currentText(), 2);
}

void TestWidget::on_pushButton_10_clicked() //第三关
{
    level = 3;
    setAllEnable(false);
    ui->progressBar->setRange(0, max_round_num[2]);
    ui->progressBar->setValue(0);
    testbattle->StartBattle(ui->comboBox_AI->currentText(), 3);
}


void TestWidget::on_pushButton_9_clicked()  //第四关
{
    level = 4;
    setAllEnable(false);
    ui->progressBar->setRange(0, max_round_num[3]);
    ui->progressBar->setValue(0);
    testbattle->StartBattle(ui->comboBox_AI->currentText(), 4);
}



void TestWidget::on_pushButton_8_clicked()
{
    level = 5;
    setAllEnable(false);
    ui->progressBar->setRange(0, max_round_num[4]);
    ui->progressBar->setValue(0);
    testbattle->StartBattle(ui->comboBox_AI->currentText(), 5);
}

void TestWidget::on_pushButton_7_clicked()
{
    level = 6;
    setAllEnable(false);
    ui->progressBar->setRange(0, max_round_num[5]);
    ui->progressBar->setValue(0);
    testbattle->StartBattle(ui->comboBox_AI->currentText(), 6);
}

void TestWidget::on_pushButton_6_clicked()
{
    level = 7;
    setAllEnable(false);
    ui->progressBar->setRange(0, max_round_num[6]);
    ui->progressBar->setValue(0);
    testbattle->StartBattle(ui->comboBox_AI->currentText(), 7);
}
